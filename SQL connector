import enum

from pydantic import BaseModel
from sqlalchemy import create_engine, Table, Column, Integer, String, MetaData, Boolean, TIMESTAMP, select, \
    SmallInteger, ForeignKey, Enum, func
from sqlalchemy.orm import sessionmaker, declarative_base

# ======================
# הגדרת FastAPI
# ======================

# ======================
# חיבור למסד נתונים MySQL
# ======================
DATABASE_URL = "mysql+pymysql://root:passEDsql1!@localhost/task_db"  # עדכן בהתאם
engine = create_engine(DATABASE_URL)
metadata = MetaData()
SessionLocal = sessionmaker(bind=engine)
Base = declarative_base()
# ======================
# הגדרת הטבלה users
# ======================
users_table = Table(
    "users", metadata,
    Column("user_id", Integer, primary_key=True, autoincrement=True),
    Column("username", String(20), nullable=False),
    Column("password", String(30), nullable=False),
    Column("is_active", Boolean, default=True),
    Column("creation_date", TIMESTAMP),
    Column("modification_date", TIMESTAMP)
)

# ======================
# מודל לקבלת נתונים
# ======================
class LoginRequest(BaseModel):
    username: str
    password: str

# ======================
# endpoint login
# ======================

class User(Base):
    __tablename__ = "users"

    user_id = Column(Integer, primary_key=True, autoincrement=True)
    username = Column(String(20), nullable=False)
    password = Column(String(30), nullable=False)
    is_active = Column(SmallInteger, default=1)
    creation_date = Column(TIMESTAMP, server_default=func.now())
    modification_date = Column(TIMESTAMP, server_default=func.now(), onupdate=func.now())

#################################################################### main task
class MainTask(Base):
    __tablename__ = "main_task"

    mTask_id = Column(Integer, primary_key=True, index=True, autoincrement=True)
    mTask_name = Column(String(255), nullable=False)
    is_active = Column(SmallInteger, default=1)
    assigned_by = Column(Integer, ForeignKey("users.user_id"), nullable=True)
    creation_date = Column(TIMESTAMP, server_default="CURRENT_TIMESTAMP")
    modification_date = Column(TIMESTAMP, server_default="CURRENT_TIMESTAMP", onupdate="CURRENT_TIMESTAMP")


class UserTaskGroup(Base):
    __tablename__ = "user_task_group_id"

    user_id = Column(Integer, ForeignKey("users.user_id"), primary_key=True)
    task_group_id = Column(Integer, ForeignKey("main_task.mTask_id"), primary_key=True)

class MainTaskCreate(BaseModel):
    mTask_name: str
    assigned_by: int | None = None

class MainTaskUpdate(BaseModel):
    mTask_name: str | None = None
    is_active: int | None = None
    assigned_by: int | None = None

class MainTaskDelete(BaseModel):
    mTask_id: int


##################################################################### task
class TaskStatus(enum.Enum):
    PENDING = "PENDING"
    DONE = "DONE"
    REJECTED = "REJECTED"


# ---------- Models ----------


class Task(Base):
    __tablename__ = "tasks"

    task_id = Column(Integer, primary_key=True, autoincrement=True)
    task_name = Column(String(255), nullable=False)
    status = Column(Enum(TaskStatus), default=TaskStatus.PENDING)
    assigned_by = Column(Integer, ForeignKey("users.user_id", ondelete="SET NULL", onupdate="CASCADE"))
    assigned_to = Column(Integer, ForeignKey("users.user_id", ondelete="SET NULL", onupdate="CASCADE"))
    task_group_id = Column(Integer, ForeignKey("main_task.mTask_id", ondelete="SET NULL", onupdate="CASCADE"))
    creation_date = Column(TIMESTAMP)
    modification_date = Column(TIMESTAMP)


# ---------- Pydantic Schemas ----------
class TaskCreate(BaseModel):
    task_name: str
    status: TaskStatus = TaskStatus.PENDING
    assigned_by: int | None = None
    assigned_to: int | None = None
    task_group_id: int | None = None


class TaskUpdate(BaseModel):
    task_name: str | None = None
    status: TaskStatus | None = None
    assigned_by: int | None = None
    assigned_to: int | None = None
    task_group_id: int | None = None

########################################################################## user
# ---------- Pydantic Schemas ----------
class UserCreate(BaseModel):
    username: str
    password: str
    is_active: int | None = 1


class UserUpdate(BaseModel):
    username: str | None = None
    password: str | None = None
    is_active: int | None = None
