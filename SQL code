CREATE SCHEMA `task_db` ;

-- user table
CREATE TABLE `task_db`.users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,   	  -- every user has his own ID
    username VARCHAR(20) NOT NULL,            	  -- every user has a name
    password VARCHAR(30) NOT NULL,            	  -- every user has a password
    is_active TINYINT(1) DEFAULT 1, 			  -- is the user active now
	creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    modification_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP 
                      ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE `task_db`.main_task(
	mTask_id INT AUTO_INCREMENT PRIMARY KEY,
    mTask_name VARCHAR(255) NOT NULL,
    is_active TINYINT(1) DEFAULt 1,
    assigned_by INT,
    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    modification_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP 
                      ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (assigned_by) REFERENCES `task_db`.users(user_id) -- the task was assigned by this user
        ON DELETE SET NULL                    -- if user is deleted field will be NULL
        ON UPDATE CASCADE                    -- if user updates the field will do the same
);

-- assignments table
CREATE TABLE `task_db`.tasks (
    task_id INT AUTO_INCREMENT PRIMARY KEY,   -- every task has its own ID
    task_name VARCHAR(255) NOT NULL,		  -- every task needs a name and explination
    status ENUM('PENDING', 'DONE', 'REJECTED') DEFAULT 'PENDING',  -- task status
    assigned_by INT,                          -- what user gave the assignment
    assigned_to INT,
    task_group_id INT,
    FOREIGN KEY (task_group_id) REFERENCES `task_db`.main_task(mTask_id)				  -- what main task does this task belong to
		ON DELETE SET NULL                    -- if user is deleted field will be NULL
        ON UPDATE CASCADE,                    -- if user updates the field will do the same
    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    modification_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP 
                      ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (assigned_by) REFERENCES `task_db`.users(user_id) -- the task was assigned by this user
        ON DELETE SET NULL                    -- if user is deleted field will be NULL
        ON UPDATE CASCADE,                    -- if user updates the field will do the same
	FOREIGN KEY (assigned_to) REFERENCES `task_db`.users(user_id) -- the task was assigned to this user
        ON DELETE SET NULL					  -- if user is deleted field will be NULL
        ON UPDATE CASCADE					  -- if user updates the field will do the same
);

CREATE TABLE `task_db`.user_task_group_id (
	user_id INT NOT NULL,
    task_group_id INT NOT NULL,
    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    modification_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP 
                      ON UPDATE CURRENT_TIMESTAMP,
	FOREIGN KEY (user_id) REFERENCES `task_db`.users(user_id)
		ON DELETE CASCADE,
	FOREIGN KEY (task_group_id) REFERENCES `task_db`.main_task(mTask_id)
		ON DELETE CASCADE
);


-- inserting 5 users
INSERT INTO `task_db`.users (username, password, is_active) VALUES
('Eden', '1234', 1),
('Tair', 'abcd', 1),
('Itai', 'password', 0),
('Meshi', 'secret', 1),
('Tal', 'qwerty', 0);

-- inserting main tasks
INSERT INTO `task_db`.main_task(mTask_name, assigned_by) VALUES
('assignment list 1', 1),
('assignment list 2', 2);

-- inserting 20 tasks
INSERT INTO `task_db`.tasks (task_name, status, assigned_by, assigned_to, task_group_id) VALUES
('Prepare project report', 'PENDING', 1, 2, 1),
('Update database', 'DONE', 1, 3, 2),
('Fix login bug', 'PENDING', 2, 1, 1),
('Design new logo', 'REJECTED', 3, 4, 1),
('Write documentation', 'PENDING', 4, 5, 1),
('Test frontend UI', 'DONE', 5, 1, 1),
('Review code', 'PENDING', 1, 4, 1),
('Create backup script', 'DONE', 2, 5, 2),
('Optimize SQL tables', 'PENDING', 3, 2, 2),
('Add dark mode feature', 'PENDING', 4, 3, 2),
('fix authentication system', 'DONE', 5, 2, 2),
('Write test cases','REJECTED', 2, 4, 2),
('Deploy application to server','DONE', 3, 1, 2),
('Prepare presentation slides', 'PENDING', 1, 5, 2),
('Implement caching', 'DONE', 4, 1, 2),
('Fix CSS layout', 'PENDING', 5, 3, 1),
('Update user manual', 'PENDING', 2, 3, 1),
('Integrate payment system', 'REJECTED', 3, 5, 2),
('Clean up old logs', 'DONE', 1, 2, 1),
('Monitor server performance', 'PENDING', 4, 5, 2);

